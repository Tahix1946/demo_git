üö©En r√©sum√©

Il existe de nombreux logiciels de gestion de version, qui peuvent √™tre bas√©s sur diff√©rents mod√®les :

    Mod√®le centralis√© : un serveur central contr√¥le toute la base de code du logiciel. 
    Exemples de logiciels de versioning utilisant un mod√®le centralis√© : SVN, CVS.

    Mod√®le distribu√© : toutes les machines ont acc√®s √† la base de code, pas besoin de passer par un serveur central. 
    Exemples de logiciels de versioning utilisant un mod√®le distribu√© : Git, Mercurial, Bazaar.

Le mod√®le distribu√© pr√©sente plusieurs avantages : 

    Moins de risques de perdre son code puisqu'il est accessible par plusieurs sources.

    On peut travailler plus rapidement et sans √™tre connect√© √† Internet puisqu'il n'y a pas besoin de se connecter √† un serveur central.

En plus des avantages du mod√®le distribu√©, Git a un autre atout : une grande communaut√© ! Cela facilite la collaboration et les √©changes fructueux entre d√©veloppeurs. :)


üö©
  834  git status
  835  git init
  836  git status
  837  touch checklist.md
  838  git status
  839  git add checklist.md
  840  git status
  841  git commit -m "Ajout√© fichier checklist"
  842  git status

üö©
  944  git init
  945  git status
  946  touch un_fichier.md
  947  add un_fichier.md
  948  git add un_fichier.md
  949  git commit -am "ajout√© mon fichier"
  950  nano un_fichier.md
  951  git status
  952  git add un_fichier.md
  953  git status
  954  git commit -m "Ajout√© des informations au fichier principal"
  955  nano un_fichier.md
  956  git status
  957  git add un_fichier.md
  958  git commit -m "deuxieme ligne"
	git log


commit d29720af061e8568b0083505c60eb3b9716c5216 (HEAD -> master)
Author: tahix <yahyaettahi@gmail.com>
Date:   Fri Dec 7 18:32:38 2018 +0100

    deuxieme ligne

commit fdfa90b02dbae8d508937f8cf29e24b492dd4f77
Author: tahix <yahyaettahi@gmail.com>
Date:   Fri Dec 7 18:29:50 2018 +0100

    Ajout√© des informations au fichier principal

commit 1b927f5c49b6c41b210ec42b6351d4d20a21422e //s'appelle le sha
Author: tahix <yahyaettahi@gmail.com>
Date:   Fri Dec 7 18:21:04 2018 +0100

    ajout√© mon fichier


   
  962  nano un_fichier.md
  963  git commit -a -m "Derni√®re modification"
ASTUCE au lieu d'√©rcrire 
	git add un_fichier.md
	git commit -m "Derni√®re modification"

Jusqu'ici, lorsque vous mettez √† jour un fichier dans votre repository, vous devez proc√©der en deux √©tapes : 

    Ajouter votre fichier √† l'index avec la commande  git add,

    git add checklist-vacances.md

    Faire un commit qui d√©crit la mise √† jour de votre fichier avec la commande  git commit.

    git commit -m "Ajout√© itin√©raire dans checklist-vacances.md"

Et bien, si vous ne faites que mettre √† jour un fichier que vous aviez d√©j√† ajout√© √† l'index, vous pouvez condenser ces deux √©tapes de la fa√ßon suivante : 

git commit -a -m "Ajout√© itin√©raire dans checklist-vacances.md"

L'option   -a demande √† Git de mettre √† jour les fichiers d√©j√† existants dans son index.

üö©
Pour vous positionner sur un commit donn√© de votre historique, il vous suffit d'utiliser la commande git checkout de la fa√ßon suivante : 

git checkout SHADuCommit

Pour revenir √† votre branche principale (au commit le plus r√©cent), on utilise la m√™me commande : 

git checkout master

üö©
Lorsque vous travaillez sur un projet sur votre machine, il est important d'avoir un backup de votre code sur une autre machine, au cas o√π la v√¥tre tombe en panne par exemple. Une fois que vous avez travaill√© sur votre code et effectu√© vos commits, vous allez donc les envoyer sur un remote, c'est-√†-dire une autre machine qui peut √™tre : 

    interne (si vous avez la chance d'avoir plusieurs ordinateurs ;) )

    ou externe (gr√¢ce √† des services comme GitHub ou BitBucket). Utiliser un remote externe va aussi vous permettre de travailler sur des projets √† plusieurs, pour que tout le monde ait acc√®s aux derni√®res modifications de chacun sur un remote partag√©. 

üö©Cr√©ez votre premier repository

git clone https://github.com/Yahya1946/demo_git.git (url https)

üö©Envoyez votre code sur GitHub
  980  cd demo_git/
  981  ls
  982  git status
  984  nano README.md
  985  git add README.md
  986  git commit -m "Ajout√© des information au readme"
  987  git log
  988  git push origin master
  992  git add git (j'ai deja coller le fichier git dans le dossier demo_git) cette commande ajout le fichier git √† l'index
  
  995  git commit -m "tuto git" (ajout de la commit)
  996  git push origin master (importation au github)
  997  git log
Cette commande demande √† Git :

    "Envoie mes modifs dans la branche master de mon remote origin."

     La branche master est la branche qui contient le code courant de votre repo GitHub. Ne vous pr√©occupez pas trop du terme "branche", on y reviendra par la suite.

    Le remote sur lequel vous envoyez votre code est appel√© origin par d√©faut. Ici, ce remote est GitHub. Si vous aviez plusieurs remotes (par exemple, votre t√©l√©phone portable ou un 2e ordinateur), vous pourriez envoyer votre code sur un remote "t√©l√©phone" ou "ordi2".

üö©R√©cup√©rez des modifications
Dans le chapitre pr√©c√©dent, vous avez vu comment envoyer vos modifications locales vers votre repo GitHub avec git push. Mais si vous modifiez votre repo GitHub en ligne, ou si vous travaillez avec d'autres personnes dessus et qu'elles envoient leurs modifications locales sur le repo en ligne, votre code local ne sera plus √† jour.
Pour r√©cup√©rer en local les derni√®res modifications du repo GitHub, il vous faut utiliser la commande git pull : 

git pull origin master

 1006  git pull origin master
 1007  cat git
 1008  git log
	nano git 
	git commit -am "petite modif en local"
	git push origin master
